score_quiz(quizzes, drop = TRUE)
score_quiz(quizzes, drop = FALSE)
score_lab <- function(x){
if(x==11|12){
return(100)
} else if(x==10){
return(80)
}else if(x==9){
return(60)
}else if(x==8){
return(40)
}else if(x==7){
return(20)
}else if(x<=6){
return(0)
}
}
core_lab(12)
score_lab(12)
score_lab(12)
score_lab(10)
score_lab(6)
score_lab(10)
score_lab <- function(x){
if(x==11|12){
return(100)
}if else(x==10){
return(80)
}if else(x==9){
return(60)
}if else(x==8){
return(40)
}if else(x==7){
return(20)
}else if(x<=6){
return(0)
}
}
score_lab <- function(x){
if(x==11|12){
return(100)
}else if(x==10){
return(80)
} else if(x==9){
return(60)
}else if(x==8){
return(40)
}else if(x==7){
return(20)
}else (x<=6){
return(0)
}
}
score_lab <- function(x) {
if (x == 11 | 12) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else (x <= 6) {
return(0)
}
}
score_lab <- function(x) {
if (x == 11 | 12) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else (x <= 6) {
return(0)
}
}
score_lab <- function(x) {
if (x == 11 | 12) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else (x <= 6) {
return(0)
}
}
score_lab <- function(x) {
if (x == 11 | 12) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else (x <= 6) {
return(0)
}
}
score_lab <- function(x) {
if (x == 11 | 12) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else (x <= 6) {
return(0)
}
}
score_lab(12)
score_lab(10)
score_lab(6)
score_lab(12)
score_lab(10)
score_lab <- function(x) {
if ((x == 11) |(x == 12)) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else if (x <= 6) {
return(0)
}
}
scor
score_lab <- function(x) {
if ((x == 11) |(x == 12)) {
return(100)
} else if (x == 10) {
return(80)
} else if (x == 9) {
return(60)
} else if (x == 8) {
return(40)
} else if (x == 7) {
return(20)
} else if (x <= 6) {
return(0)
}
}
score_lab(12)
score_lab(10)
score_lab(6)
format()
?format
names(stats)
format(1:10)
?nchar
nchar(names(stats))
str_length(names(stats))
length(names(stats))
?nsmall
?nsmall
print_stats <- function(x){
names <- format(names(x),width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x,4),nsmall=4)
for (i in 1:length(x) {
cat(paste(names[i],":",x[i],sep = "","\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = "", "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = "", "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = "",) "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x){
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
nsmall?
?nsmall
print_stats <- function(x){
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4))
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x){
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4),nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4),nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x) {
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep = ""), "\n")
}
}
print_stats <- function(x){
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x) {
cat(paste(names[i], ":", x[i], sep =""), "\n")
}
}
print_stats <- function(x){
names <- format(names(x), width = max(nchar(names(x))))
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
for (i in 1:length(x)) {
cat(paste(names[i], ":", x[i], sep =""), "\n")
}
}
print_stats(stats)
x <- format(round(stats, 4), nsmall = 4)
x <- as.numeric(stats)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
x <- as.numeric(x)
x <- format(round(x, 4), nsmall = 4)
as.numeric(stats)
?nsmall
?? nsmall
format(round(stats,4),nsmall=4)
x <- as.numeric(stats)
x <- format(round(x, 4), nsmall = 4)
format()
x <- as.numeric(stats)
x <- format(round(x, 4), nsmall = 4)
x
format(names(x), width = max(nchar(names(x))))
format(names(stats), width = max(nchar(names(stats))))
get_minimum <- function(x,na.rm = FALSE) {
stopifnot(is.numeric(x))
if (na.rm){
x<-remove_missing(x)
}
x=sort(x,decreasing=FALSE)[1]
return(x)
}
get_minimum(a,na.rm = TRUE)
get_maximum <- function(x,na.rm =FALSE) {
stopifnot(is.numeric(x))
if (na.rm){
x<-remove_missing(x)
}
x=sort(x,decreasing=TRUE)[1]
return(x)
}
get_range <- function(x,na.rm = FALSE) {
stopifnot(is.numeric(x))
if (na.rm){
x<-remove_missing(x)
}
x=get_maximum(x)-get_minimum(x)
return(x)
}
get_range(a, na.rm = TRUE)
get_median <- function(x, na.rm = FALSE) {
stopifnot(is.numeric(x))
if (na.rm) {
x<-remove_missing(x)
}
x = sort(x, decreasing = FALSE)
if (length(x) %% 2 == 0) {
x = (x[length(x)/ 2] + x[(length(x)/ 2) + 1])/2
return(x)
} else{
x = x[(length(x) + 1) / 2]
return(x)
}
}
get_average <- function(x, na.rm = FALSE) {
stopifnot(is.numeric(x))
if (na.rm) {
x<-remove_missing(x)
}
sum <- 0
for (i in 1:length(x)) {
sum <-  sum + x[i]
}
x <- sum / length(x)
return(x)
}
get_average(a,na.rm = TRUE)
get_stdev<-function(x,na.rm = FALSE) {
stopifnot(is.numeric(x))
if (na.rm) {
x<-remove_missing(x)
}
deviations <- 0
for (i in 1:length(x)) {
deviations <- deviations + (x[i] - get_average(x))^2
}
x=sqrt(deviations / (length(x) - 1))
return(x)
}
get_quartile1 <-function(x,na.rm =FALSE){
stopifnot(is.numeric(x))
if (na.rm) {
x<-remove_missing(x)
}
x=quantile(x,0.25)
return(x)
}
get_quartile1(a,na.rm = TRUE)
get_quartile3 <-function(x,na.rm =FALSE){
stopifnot(is.numeric(x))
if (na.rm) {
x<-remove_missing(x)
}
x=quantile(x,0.75)
return(x)
}
get_quartile3(a,na.rm = TRUE)
source('~/Desktop/stat133/stat133_github/stat133-hws-fall17/hw04/code/clean-data-script.R', echo=TRUE)
library(dplyr)
library(dplyr)
source('~/Desktop/stat133/stat133_github/stat133-hws-fall17/hw04/code/clean-data-script.R', echo=TRUE)
shiny::runApp('app/gradevis.R')
library(shiny)
library(ggvis)
library(dplyr)
names <- colnames(dat)
names1 <- colnames(dat[,1:22])
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.tabselected==1",
fluidRow(
h3("Grade Distribution"),
column(3, tableOutput('table'))
)
),
conditionalPanel(
condition = "input.tabselected==2",
h3("Panel of 2nd tab"),
selectInput("var1", "X-axis Variable",
names1,
selected = "HW1"
),
sliderInput("bins","Bin Width",
min = 1,
max = 10,
value = 10)
),
conditionalPanel(
condition = "input.tabselected==3",
h3("Panel of 3rd tab"),
selectInput("var2", "X-axis Variable",
names,
selected = "Test1"),
selectInput("var3","Y-axix Variable",
names,
selected = "overall"),
sliderInput("opacity","Opacity",
min = 0,
max = 1,
value = 0.5),
radioButtons("lines","Show Line",choices = c("none","lm","lowess"),
selected = "none")
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value=1,
ggvisOutput("barchart")),
tabPanel("Histogram",value=2,
ggvisOutput("histogram"),
h4("Summary Statistics"),
verbatimTextOutput("summary")),
tabPanel("Scatterplot",value=3,
ggvisOutput("scatterplot"),
h4("Correlation"),
verbatimTextOutput("Correlation")),
id="tabselected")
)
)
)
# Define server logic ----
server <- function(input, output) {
vis_barchart <- reactive({
grade_table %>%
ggvis(~Grade,~count,fill :="lightblue",opacity :=0.5) %>%
layer_bars()
})
vis_barchart %>% bind_shiny("barchart")
output$table <- renderTable(grade_table)
vis_histogram <- reactive({
var1 <- prop("x",as.symbol(input$var1))
dat %>%
ggvis(x = var1, fill :="orange",opacity :=0.5) %>%
layer_histograms(stroke := 'white',
width = input$bins
)
})
vis_histogram %>% bind_shiny("histogram")
output$summary <- renderPrint(
print_stats(unlist(summary_stats(dat[,input$var1]),use.names = TRUE))
)
vis_scatterplot <- reactive({
var2 <- prop("x",as.symbol(input$var2))
var3 <- prop("y",as.symbol(input$var3))
if (input$lines=="none"){
dat%>% ggvis(x=var2,y=var3,opacity :=input$opacity) %>%
layer_points()
} else if (input$lines=="lm"){
dat %>%
ggvis(x=var2,y=var3,opacity :=input$opacity) %>%
layer_points() %>% layer_model_predictions(model = "lm",se=FALSE)
}  else if (input$lines=="lowess"){
dat %>%
ggvis(x=var2,y=var3,opacity :=input$opacity) %>%
layer_points() %>%
layer_smooths()
}
})
vis_scatterplot %>% bind_shiny("scatterplot")
output$Correlation <- renderText(
cor(dat[,input$var2], dat[, input$var3])
)
}
# Run the app ----
shinyApp(ui = ui, server = server)
setwd("~/Desktop/stat133/stat133_github/stat133-hws-fall17/hw04")
